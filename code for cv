{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1dfc95ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "The following code can be used to define a conservative filter:\n",
    "# first a conservative filter for grayscale images will be defined.\n",
    "def conservative_smoothing_gray(data, filter_size):\n",
    "temp = []\n",
    "    \n",
    "    indexer = filter_size // 2\n",
    "    \n",
    "    new_image = data.copy()\n",
    "    \n",
    "    nrow, ncol = data.shape\n",
    "    \n",
    "    for i in range(nrow):\n",
    "        \n",
    "        for j in range(ncol):\n",
    "            \n",
    "            for k in range(i-indexer, i+indexer+1):\n",
    "                \n",
    "                for m in range(j-indexer, j+indexer+1):\n",
    "                    \n",
    "                    if (k > -1) and (k < nrow):\n",
    "                        \n",
    "                        if (m > -1) and (m < ncol):\n",
    "                            \n",
    "                            temp.append(data[k,m])\n",
    "                            \n",
    "            temp.remove(data[i,j])\n",
    "            \n",
    "            \n",
    "            max_value = max(temp)\n",
    "            \n",
    "            min_value = min(temp)\n",
    "            \n",
    "            if data[i,j] > max_value:\n",
    "                \n",
    "                new_image[i,j] = max_value\n",
    "            \n",
    "            elif data[i,j] < min_value:\n",
    "                \n",
    "                new_image[i,j] = min_value\n",
    "            \n",
    "            temp =[]\n",
    "    \n",
    "    return new_image.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcf487ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Now the conservative filter can be applied to a gray scale image:\n",
    "new_image = conservative_smoothing_gray(image2,5)\n",
    "plt.figure(figsize=(11,6))\n",
    "plt.subplot(121), plt.imshow(image2, cmap='gray'),plt.title('Original')\n",
    "plt.xticks([]), plt.yticks([])\n",
    "plt.subplot(122), plt.imshow(new_image, cmap='gray'),plt.title('Conservative Smoothing')\n",
    "plt.xticks([]), plt.yticks([])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9443bc0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#applying the mediann filter\n",
    "new_image = cv2.medianBlur(image, figure_size)\n",
    "plt.figure(figsize=(11,6))\n",
    "plt.subplot(121), plt.imshow(cv2.cvtColor(image, cv2.COLOR_HSV2RGB)),plt.title('Original')\n",
    "plt.xticks([]), plt.yticks([])\n",
    "plt.subplot(122), plt.imshow(cv2.cvtColor(new_image, cv2.COLOR_HSV2RGB)),plt.title('Median Filter')\n",
    "plt.xticks([]), plt.yticks([])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f846e2a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#The median filter will now be applied to a grayscale image.\n",
    "new_image = cv2.medianBlur(image2, figure_size)\n",
    "plt.figure(figsize=(11,6))\n",
    "plt.subplot(121), plt.imshow(image2, cmap='gray'),plt.title('Original')\n",
    "plt.xticks([]), plt.yticks([])\n",
    "plt.subplot(122), plt.imshow(new_image, cmap='gray'),plt.title('Median Filter')\n",
    "plt.xticks([]), plt.yticks([])\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
